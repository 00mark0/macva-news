// components/index.templ
package components

import "github.com/00mark0/macva-news/db/services"
import "github.com/jackc/pgx/v5/pgtype"
import "fmt"
import "github.com/00mark0/macva-news/utils"

type ContentData struct {
	ContentID           pgtype.UUID
	UserID              pgtype.UUID
	CategoryID          pgtype.UUID
	CategoryName        string
	Title               string
	Thumbnail           pgtype.Text
	ContentDescription  string
	CommentsEnabled     bool
	ViewCountEnabled    bool
	LikeCountEnabled    bool
	DislikeCountEnabled bool
	Status              string
	ViewCount           int32
	LikeCount           int32
	DislikeCount        int32
	CommentCount        int32
	CreatedAt           pgtype.Timestamptz
	UpdatedAt           pgtype.Timestamptz
	PublishedAt         pgtype.Timestamptz
	IsDeleted           pgtype.Bool
	TotalInteractions   int32
}

templ LoadingSpinner() {
	<div class="flex justify-center items-center w-full min-h-[300px]">
		<div class="relative">
			<svg
				class="animate-spin h-18 w-18 text-blue-600 dark:text-blue-400"
				xmlns="http://www.w3.org/2000/svg"
				fill="none"
				viewBox="0 0 24 24"
			>
				<circle
					class="opacity-50"
					cx="12"
					cy="12"
					r="10"
					stroke="currentColor"
					stroke-width="4"
				></circle>
				<path
					class="opacity-100"
					fill="currentColor"
					d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
				></path>
			</svg>
			<div class="absolute inset-0 flex items-center justify-center">
				<div class="w-4 h-4 bg-blue-600 dark:bg-blue-400 rounded-full animate-ping"></div>
			</div>
		</div>
	</div>
}

// Inline version for less intrusive loading states
templ InlineLoadingSpinner() {
	<div class="flex justify-center items-center py-4">
		<svg
			class="animate-spin h-6 w-6 text-blue-600"
			xmlns="http://www.w3.org/2000/svg"
			fill="none"
			viewBox="0 0 24 24"
		>
			<circle
				class="opacity-25"
				cx="12"
				cy="12"
				r="10"
				stroke="currentColor"
				stroke-width="4"
			></circle>
			<path
				class="opacity-75"
				fill="currentColor"
				d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
			></path>
		</svg>
	</div>
}

templ main() {
	<div
		hx-get="/api/news-slider"
		hx-trigger="load"
		hx-target="#news-slide"
		hx-swap="innerHTML"
	>
		<section id="news-slide">
			<div id="loading-spinner">
				@LoadingSpinner()
			</div>
		</section>
		<section id="other-content" hx-get="/api/content/other" hx-trigger="load" hx-target="#other-content" hx-swap="innerHTML" class="mt-10">
			@LoadingSpinner()
		</section>
		<section id="popular-content" hx-get="/api/content/popular" hx-trigger="load" hx-target="#popular-content" hx-swap="innerHTML" class="mt-10">
			@LoadingSpinner()
		</section>
		<section id="categories-content" hx-get="/api/content/categories" hx-trigger="load" hx-target="#categories-content" hx-swap="innerHTML" class="mt-10">
			@LoadingSpinner()
		</section>
	</div>
}

templ NewsSlider(categories []db.Category, contentByCategory map[pgtype.UUID][]db.ListContentByCategoryRow, globalSettings db.GlobalSetting) {
	<div class="news-slider-container mx-auto px-4 h-full">
		// Category Navigation
		<div class="category-nav px-2 flex justify-center mb-6 overflow-x-auto py-2 bg-white/80 dark:bg-gray-800/80 backdrop-blur-md rounded-xl shadow-lg scroll-smooth">
			<div class="flex gap-4" x-ref="categoryContainer">
				for i, category := range categories {
					<button
						data-slide={ fmt.Sprint(i) }
						class="category-tab shrink-0 cursor-pointer py-2 text-md font-medium transition-all duration-300 ease-in-out border-b-2 border-transparent hover:text-blue-600 hover:border-blue-600 dark:hover:text-blue-400 dark:hover:border-blue-400 focus:outline-none text-gray-600 dark:text-gray-300 first:ml-0"
					>
						{ category.CategoryName }
					</button>
				}
			</div>
		</div> // Slider Container
		<div class="slider-wrapper w-full h-full relative overflow-hidden">
			<div class="slider flex w-full h-full shrink-0 aspect-video scrollbar-hide overflow-x-auto overflow-y-hidden scroll-smooth rounded-lg shadow-lg">
				for i, category := range categories {
					<div
						id={ fmt.Sprintf("slide-%d", i) }
						class="slider-item flex flex-col shrink-0 h-full w-full scroll-snap-align-start"
					>
						if len(contentByCategory[category.CategoryID]) > 0 {
							@ArticleCardSlider(contentByCategory[category.CategoryID][0], globalSettings)
						}
					</div>
				}
			</div>
			// Slider Controls
			<div id="slider-controls" class="slider-controls w-full flex justify-center gap-2 mt-4">
				for i, _ := range categories {
					<button
						data-slide={ fmt.Sprint(i) }
						class="slider-control cursor-pointer w-3 h-3 bg-gray-300 hover:bg-blue-500 rounded-full transition-all duration-300 ease-in-out"
					></button>
				}
			</div>
		</div>
	</div>
	<script>
			const slider = document.querySelector('.slider');
			const slides = document.querySelectorAll('.slider-item');
			const controls = document.querySelectorAll('.slider-control');
			const categoryTabs = document.querySelectorAll('.category-tab');
			const categoryNav = document.querySelector('.category-nav');
			categoryNav.scrollLeft = 0;

			// Function to update active states
			function updateActiveStates(index) {
				// Update category tabs
				categoryTabs.forEach((tab, i) => {
					if (i === index) {
						tab.classList.add('text-blue-500', 'border-blue-500');
						tab.classList.remove('text-gray-600', 'dark:text-gray-300', 'border-transparent');
					} else {
						tab.classList.remove('text-blue-600', 'border-blue-600');
						tab.classList.add('text-gray-600', 'dark:text-gray-300', 'border-transparent');
					}
				});

				// Update slider controls
				controls.forEach((control, i) => {
					if (i === index) {
						control.classList.add('bg-blue-500', 'w-4', 'h-4');
						control.classList.remove('bg-gray-300', 'w-3', 'h-3');
					} else {
						control.classList.remove('bg-blue-500', 'w-4', 'h-4');
						control.classList.add('bg-gray-300', 'w-3', 'h-3');
					}
				});
			}

			// Initial active state
			updateActiveStates(0);

			// Slider control event listeners
			controls.forEach((control, index) => {
				control.addEventListener('click', () => {
					const targetSlide = slides[index];
					targetSlide.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });
					updateActiveStates(index);
				});
			});

			// Category tab event listeners
			categoryTabs.forEach((control, index) => {
				control.addEventListener('click', () => {
					const targetSlide = slides[index];
					targetSlide.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });
					updateActiveStates(index);
				});
			});

			// Intersection Observer to handle scroll-based active state
			const observerOptions = {
				root: slider,
				threshold: 0.5
			};

			const observer = new IntersectionObserver((entries) => {
				entries.forEach(entry => {
					if (entry.isIntersecting) {
						const index = Array.from(slides).indexOf(entry.target);
						updateActiveStates(index);
					}
				});
			}, observerOptions);

			slides.forEach(slide => observer.observe(slide));
	</script>
	<style>
		.slider {
		box-shadow: 0 1.5rem 3rem -0.75rem hsla(0, 0%, 0%, 0.25);
		border-radius: 0.5rem;
		scroll-snap-type: x mandatory;
		scroll-behavior: smooth;
		-webkit-overflow-scrolling: touch; /* Enable smooth scrolling on iOS */
		}

		.slider::-webkit-scrollbar {
		display: none; /* Safari and Chrome */
		}

		/* Ensure each child (slide) aligns with the scroll-snap */
		.slider > div {
		scroll-snap-align: start; /* Snap the slides to the start when scrolled */
		}
	</style>
}

templ ArticleCardSlider(article db.ListContentByCategoryRow, globalSettings db.GlobalSetting) {
	<article class="flex flex-col shrink-0 bg-white shadow-lg rounded-lg overflow-hidden sm:h-full w-full relative">
		<div class="group relative bg-white shadow-md border-b-2 border-gray-200 transition-all duration-300 hover:shadow-lg hover:-translate-y-1 dark:bg-gray-800 flex flex-col h-full w-full" style="z-index: 10;">
			if article.Thumbnail.Valid && article.Thumbnail.String != "" {
				<div class="relative w-full h-full aspect-video overflow-hidden">
					<a href="#" class="block h-full w-full relative">
						<img
							src={ article.Thumbnail.String }
							alt={ article.Title }
							class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105 brightness-90 group-hover:brightness-100"
						/>
						<div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/10 to-transparent bg-white/90 text-black p-2 sm:p-4 max-h-[40%] overflow-hidden">
							<div class="space-y-1 sm:space-y-2">
								<div class="flex justify-between items-center">
									<h2 class="max-w-[50%] sm:max-w-[70%] block truncate text-sm sm:text-xl font-semibold line-clamp-1 leading-tight text-ellipsis">
										{ article.Title }
									</h2>
									<div>
										<p class="text-sm sm:text-lg">{ article.CategoryName }</p>
									</div>
								</div>
								<div>
									<p class="hidden truncate sm:block text-xs sm:text-sm mb-2 line-clamp-2 opacity-80 text-ellipsis">
										{ 	utils.ParseHTMLToText(article.ContentDescription) }
									</p>
								</div>
								<div class="flex items-center justify-between text-xs sm:text-sm">
									<div class="flex space-x-2 sm:space-x-3">
										if article.ViewCountEnabled && !globalSettings.DisableViews {
											<span class="flex items-center">
												<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 sm:h-4 sm:w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
													<path d="M10 12a2 2 0 100-4 2 2 0 000 4z"></path>
													<path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd"></path>
												</svg>
												{ fmt.Sprint(article.ViewCount) }
											</span>
										}
										if article.LikeCountEnabled && !globalSettings.DisableLikes {
											<span class="flex items-center">
												<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 sm:h-4 sm:w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
													<path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z"></path>
												</svg>
												{ fmt.Sprint(article.LikeCount) }
											</span>
										}
										if article.CommentsEnabled && !globalSettings.DisableComments {
											<span class="flex items-center">
												<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 sm:h-4 sm:w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
													<path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path>
												</svg>
												{ fmt.Sprint(article.CommentCount) }
											</span>
										}
									</div>
									<span class="text-xs sm:text-sm opacity-80">
										{ utils.TimeAgo(article.PublishedAt.Time) }
									</span>
								</div>
							</div>
						</div>
					</a>
				</div>
			}
		</div>
	</article>
}

templ GridCards(content []ContentData, globalSettings db.GlobalSetting, nextLimit int, title string) {
	<h3 class="text-xl font-bold mb-4 text-gray-800 dark:text-gray-200">{ title }</h3>
	<div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
		for _, v := range content {
			<article class="group relative bg-white shadow-md border-b-2 border-gray-200 transition-all duration-300 hover:shadow-lg hover:-translate-y-1 overflow-hidden dark:bg-gray-800 flex flex-col h-96" style="z-index: 10;">
				if v.Thumbnail.Valid && v.Thumbnail.String != "" {
					<div class="relative w-full h-full">
						<img
							src={ v.Thumbnail.String }
							alt={ v.Title }
							class="absolute inset-0 w-full h-full object-cover transition-transform duration-500 group-hover:scale-105 brightness-90 group-hover:brightness-100"
						/>
						<div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/30 to-transparent"></div>
					</div>
				}
				<div class="p-4 relative mt-auto z-10 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm">
					<div class="absolute top-0 left-0 w-1 h-full bg-gray-800 group-hover:bg-blue-600 transition-colors duration-300"></div>
					<div class="flex justify-between items-center text-xs text-gray-600 dark:text-gray-300 mb-2 space-x-2">
						<span class="dark:text-gray-300">{ utils.TimeAgo(v.PublishedAt.Time) }</span>
						<p class="text-sm sm:text-md">{ v.CategoryName }</p>
					</div>
					<h2 class="text-lg font-semibold text-gray-900 dark:text-gray-200 mb-2 line-clamp-2 leading-tight">
						{ v.Title }
					</h2>
					<p class="text-sm text-gray-700 dark:text-gray-300 mb-3 line-clamp-2 leading-tight">
						{ utils.ParseHTMLToText(v.ContentDescription) }
					</p>
					<div class="flex items-center justify-between mt-2 pt-2 border-t border-gray-100 dark:border-gray-700">
						<div class="flex space-x-3 text-xs text-gray-600 dark:text-gray-300">
							if v.ViewCountEnabled && !globalSettings.DisableViews {
								<span class="flex items-center hover:text-green-600 transition-colors">
									<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
										<path d="M10 12a2 2 0 100-4 2 2 0 000 4z"></path>
										<path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd"></path>
									</svg>
									{ fmt.Sprint(v.ViewCount) }
								</span>
							}
							if v.LikeCountEnabled && !globalSettings.DisableLikes {
								<span class="flex items-center hover:text-red-600 transition-colors">
									<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
										<path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z"></path>
									</svg>
									{ fmt.Sprint(v.LikeCount) }
								</span>
							}
							if v.CommentsEnabled && !globalSettings.DisableComments {
								<span class="flex items-center hover:text-blue-600 transition-colors">
									<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
										<path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path>
									</svg>
									{ fmt.Sprint(v.CommentCount) }
								</span>
							}
						</div>
					</div>
				</div>
				if !v.Thumbnail.Valid || v.Thumbnail.String == "" {
					<div class="absolute inset-0 bg-gradient-to-t from-gray-900 to-gray-700 opacity-50"></div>
				}
			</article>
		}
	</div>
	if nextLimit < 18 {
		<div class="text-center mt-8">
			<button
				hx-get={ "/api/content/popular?limit=" + fmt.Sprint(nextLimit) }
				hx-target="#popular-content"
				hx-swap="innerHTML"
				hx-trigger="click"
				class="cursor-pointer inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-150 ease-in-out"
			>
				Učitaj više
				<svg
					xmlns="http://www.w3.org/2000/svg"
					class="h-4 w-4 ml-2"
					fill="none"
					viewBox="0 0 24 24"
					stroke="currentColor"
				>
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
				</svg>
			</button>
		</div>
	}
}

type ContentDataSlice struct {
	Content []ContentData
}

templ CategoriesWithContent(content []ContentDataSlice, globalSettings db.GlobalSetting) {
	if len(content) > 0 {
		<div class="mt-10">
			@GridCards(content[0].Content, globalSettings, 20, content[0].Content[0].CategoryName)
		</div>
	}
	if len(content) > 1 {
		<div class="mt-10">
			@GridCards(content[1].Content, globalSettings, 20, content[1].Content[0].CategoryName)
		</div>
	}
	if len(content) > 2 {
		<div class="mt-10">
			@GridCards(content[2].Content, globalSettings, 20, content[2].Content[0].CategoryName)
		</div>
	}
	if len(content) > 3 {
		<div class="mt-10">
			@GridCards(content[3].Content, globalSettings, 20, content[3].Content[0].CategoryName)
		</div>
	}
}

templ Index(props ...interface{}) {
	@Layout(props[0].(db.GetUserByIDRow), props[1].(Meta), props[2].([]db.Ad), props[3].([]db.Category), main())
}
