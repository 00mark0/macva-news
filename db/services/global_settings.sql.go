// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: global_settings.sql

package db

import (
	"context"
)

const getGlobalSettings = `-- name: GetGlobalSettings :one
SELECT global_settings_id, disable_comments, disable_likes, disable_dislikes, disable_views, disable_ads FROM "global_settings" LIMIT 1
`

func (q *Queries) GetGlobalSettings(ctx context.Context) (GlobalSetting, error) {
	row := q.db.QueryRow(ctx, getGlobalSettings)
	var i GlobalSetting
	err := row.Scan(
		&i.GlobalSettingsID,
		&i.DisableComments,
		&i.DisableLikes,
		&i.DisableDislikes,
		&i.DisableViews,
		&i.DisableAds,
	)
	return i, err
}

const resetGlobalSettings = `-- name: ResetGlobalSettings :exec
UPDATE "global_settings"
SET
    "disable_comments" = false,
    "disable_likes" = false,
    "disable_dislikes" = false,
    "disable_views" = false,
    "disable_ads" = false,
    "updated_at" = now()
WHERE "global_settings_id" = (SELECT "global_settings_id" FROM "global_settings" LIMIT 1)
`

func (q *Queries) ResetGlobalSettings(ctx context.Context) error {
	_, err := q.db.Exec(ctx, resetGlobalSettings)
	return err
}

const updateGlobalSettings = `-- name: UpdateGlobalSettings :exec
UPDATE "global_settings"
SET
    "disable_comments" = $1,
    "disable_likes" = $2,
    "disable_dislikes" = $3,
    "disable_views" = $4,
    "disable_ads" = $5,
    "updated_at" = now()
WHERE "global_settings_id" = (SELECT "global_settings_id" FROM "global_settings" LIMIT 1)
`

type UpdateGlobalSettingsParams struct {
	DisableComments bool
	DisableLikes    bool
	DisableDislikes bool
	DisableViews    bool
	DisableAds      bool
}

func (q *Queries) UpdateGlobalSettings(ctx context.Context, arg UpdateGlobalSettingsParams) error {
	_, err := q.db.Exec(ctx, updateGlobalSettings,
		arg.DisableComments,
		arg.DisableLikes,
		arg.DisableDislikes,
		arg.DisableViews,
		arg.DisableAds,
	)
	return err
}
