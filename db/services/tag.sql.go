// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tag.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addTagToContent = `-- name: AddTagToContent :exec
INSERT INTO content_tag (content_id, tag_id)
VALUES ($1, $2)
`

type AddTagToContentParams struct {
	ContentID pgtype.UUID
	TagID     pgtype.UUID
}

func (q *Queries) AddTagToContent(ctx context.Context, arg AddTagToContentParams) error {
	_, err := q.db.Exec(ctx, addTagToContent, arg.ContentID, arg.TagID)
	return err
}

const createTag = `-- name: CreateTag :one
INSERT INTO tag (tag_name)
VALUES ($1)
RETURNING tag_id, tag_name
`

func (q *Queries) CreateTag(ctx context.Context, tagName string) (Tag, error) {
	row := q.db.QueryRow(ctx, createTag, tagName)
	var i Tag
	err := row.Scan(&i.TagID, &i.TagName)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
WITH deleted_tag AS (
  DELETE FROM tag
  WHERE tag.tag_id = $1
  RETURNING tag_id
)
DELETE FROM content_tag
WHERE tag_id IN (SELECT tag_id FROM deleted_tag)
`

func (q *Queries) DeleteTag(ctx context.Context, tagID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTag, tagID)
	return err
}

const getTag = `-- name: GetTag :one
SELECT tag_id, tag_name
FROM tag
WHERE tag_id = $1
`

func (q *Queries) GetTag(ctx context.Context, tagID pgtype.UUID) (Tag, error) {
	row := q.db.QueryRow(ctx, getTag, tagID)
	var i Tag
	err := row.Scan(&i.TagID, &i.TagName)
	return i, err
}

const getTagsByContent = `-- name: GetTagsByContent :many
SELECT tag.tag_id, tag.tag_name
FROM tag
JOIN content_tag ct ON tag.tag_id = ct.tag_id
WHERE ct.content_id = $1
`

func (q *Queries) GetTagsByContent(ctx context.Context, contentID pgtype.UUID) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getTagsByContent, contentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.TagID, &i.TagName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUniqueTagsByCategoryID = `-- name: GetUniqueTagsByCategoryID :many
SELECT DISTINCT t.tag_id, t.tag_name
FROM tag t
JOIN content_tag ct ON t.tag_id = ct.tag_id
JOIN content c ON ct.content_id = c.content_id
WHERE c.category_id = $1
  AND c.status = 'published'
  AND c.is_deleted = false
ORDER BY t.tag_name
`

func (q *Queries) GetUniqueTagsByCategoryID(ctx context.Context, categoryID pgtype.UUID) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getUniqueTagsByCategoryID, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.TagID, &i.TagName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT tag_id, tag_name
FROM tag
ORDER BY tag_name ASC
LIMIT $1
`

func (q *Queries) ListTags(ctx context.Context, limit int32) ([]Tag, error) {
	rows, err := q.db.Query(ctx, listTags, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.TagID, &i.TagName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTagFromContent = `-- name: RemoveTagFromContent :exec
DELETE FROM content_tag
WHERE content_id = $1 AND tag_id = $2
`

type RemoveTagFromContentParams struct {
	ContentID pgtype.UUID
	TagID     pgtype.UUID
}

func (q *Queries) RemoveTagFromContent(ctx context.Context, arg RemoveTagFromContentParams) error {
	_, err := q.db.Exec(ctx, removeTagFromContent, arg.ContentID, arg.TagID)
	return err
}

const searchTags = `-- name: SearchTags :many
SELECT tag_id, tag_name
FROM tag
WHERE lower(tag_name) LIKE lower($2::text)
ORDER BY tag_name ASC
LIMIT $1
`

type SearchTagsParams struct {
	Limit  int32
	Search string
}

func (q *Queries) SearchTags(ctx context.Context, arg SearchTagsParams) ([]Tag, error) {
	rows, err := q.db.Query(ctx, searchTags, arg.Limit, arg.Search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.TagID, &i.TagName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :one
UPDATE tag
SET tag_name = $1
WHERE tag_id = $2
RETURNING tag_id, tag_name
`

type UpdateTagParams struct {
	TagName string
	TagID   pgtype.UUID
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (Tag, error) {
	row := q.db.QueryRow(ctx, updateTag, arg.TagName, arg.TagID)
	var i Tag
	err := row.Scan(&i.TagID, &i.TagName)
	return i, err
}
