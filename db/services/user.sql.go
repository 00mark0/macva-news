// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const banUser = `-- name: BanUser :exec
UPDATE "user" 
SET banned = true 
WHERE user_id = $1
`

func (q *Queries) BanUser(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, banUser, userID)
	return err
}

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT 1 
FROM "user" 
WHERE email = $1
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (int32, error) {
	row := q.db.QueryRow(ctx, checkEmailExists, email)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (username, email, password) 
VALUES ($1, $2, $3)
RETURNING user_id, username, email, password, pfp, role, email_verified, banned, is_deleted, created_at
`

type CreateUserParams struct {
	Username string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Pfp,
		&i.Role,
		&i.EmailVerified,
		&i.Banned,
		&i.IsDeleted,
		&i.CreatedAt,
	)
	return i, err
}

const createUserAdmin = `-- name: CreateUserAdmin :one
INSERT INTO "user" (username, email, password, role) 
VALUES ($1, $2, $3, $4)  
RETURNING user_id, username, email, password, pfp, role, email_verified, banned, is_deleted, created_at
`

type CreateUserAdminParams struct {
	Username string
	Email    string
	Password string
	Role     string
}

func (q *Queries) CreateUserAdmin(ctx context.Context, arg CreateUserAdminParams) (User, error) {
	row := q.db.QueryRow(ctx, createUserAdmin,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Pfp,
		&i.Role,
		&i.EmailVerified,
		&i.Banned,
		&i.IsDeleted,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE "user" 
SET email = CONCAT('deleted_', user_id, '@example.com'), 
    password = '', 
    pfp = 'https://res.cloudinary.com/dxq2xh2oq/image/upload/v1656979667/avatar/avatar-1_1_1_1_u2v3i2.png', 
    is_deleted = true 
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getActiveUsers = `-- name: GetActiveUsers :many
SELECT user_id, username, email, password, pfp, role, email_verified, banned, is_deleted, created_at
FROM "user"
WHERE "is_deleted" = false
  AND "banned" = false
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetActiveUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetActiveUsers(ctx context.Context, arg GetActiveUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getActiveUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Pfp,
			&i.Role,
			&i.EmailVerified,
			&i.Banned,
			&i.IsDeleted,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActiveUsersCount = `-- name: GetActiveUsersCount :one
SELECT COUNT(*) AS count
FROM "user"
WHERE "is_deleted" = false
  AND "banned" = false
`

func (q *Queries) GetActiveUsersCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getActiveUsersCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAdminUsers = `-- name: GetAdminUsers :many
SELECT user_id, username, email, password, pfp, role, email_verified, banned, is_deleted, created_at
FROM "user"
WHERE "role" = 'admin'
ORDER BY created_at DESC
`

func (q *Queries) GetAdminUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAdminUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Pfp,
			&i.Role,
			&i.EmailVerified,
			&i.Banned,
			&i.IsDeleted,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBannedUsers = `-- name: GetBannedUsers :many
SELECT user_id, username, email, password, pfp, role, email_verified, banned, is_deleted, created_at
FROM "user"
WHERE "banned" = true
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetBannedUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetBannedUsers(ctx context.Context, arg GetBannedUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getBannedUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Pfp,
			&i.Role,
			&i.EmailVerified,
			&i.Banned,
			&i.IsDeleted,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBannedUsersCount = `-- name: GetBannedUsersCount :one
SELECT COUNT(*) AS count
FROM "user"
WHERE "banned" = true
`

func (q *Queries) GetBannedUsersCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getBannedUsersCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getDeletedUsers = `-- name: GetDeletedUsers :many
SELECT user_id, username, email, password, pfp, role, email_verified, banned, is_deleted, created_at
FROM "user"
WHERE "is_deleted" = true
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetDeletedUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetDeletedUsers(ctx context.Context, arg GetDeletedUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getDeletedUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Pfp,
			&i.Role,
			&i.EmailVerified,
			&i.Banned,
			&i.IsDeleted,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeletedUsersCount = `-- name: GetDeletedUsersCount :one
SELECT COUNT(*) AS count
FROM "user"
WHERE "is_deleted" = true
`

func (q *Queries) GetDeletedUsersCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getDeletedUsersCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, username, password, email, role, pfp, email_verified, banned 
FROM "user" 
WHERE email = $1 AND banned = false
`

type GetUserByEmailRow struct {
	UserID        pgtype.UUID
	Username      string
	Password      string
	Email         string
	Role          string
	Pfp           string
	EmailVerified pgtype.Bool
	Banned        pgtype.Bool
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
		&i.Pfp,
		&i.EmailVerified,
		&i.Banned,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, username, password, email, role, pfp, email_verified, banned 
FROM "user" 
WHERE user_id = $1 AND banned = false
`

type GetUserByIDRow struct {
	UserID        pgtype.UUID
	Username      string
	Password      string
	Email         string
	Role          string
	Pfp           string
	EmailVerified pgtype.Bool
	Banned        pgtype.Bool
}

func (q *Queries) GetUserByID(ctx context.Context, userID pgtype.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i GetUserByIDRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
		&i.Pfp,
		&i.EmailVerified,
		&i.Banned,
	)
	return i, err
}

const searchActiveUsers = `-- name: SearchActiveUsers :many
SELECT
  u.user_id, u.username, u.email, u.password, u.pfp, u.role, u.email_verified, u.banned, u.is_deleted, u.created_at
FROM "user" u
WHERE u.is_deleted = false 
  AND u.banned = false
  AND (
    u.username ILIKE '%' || $3::text || '%'
    OR u.email ILIKE '%' || $3::text || '%'
  )
ORDER BY u.created_at DESC
LIMIT $1 OFFSET $2
`

type SearchActiveUsersParams struct {
	Limit      int32
	Offset     int32
	SearchTerm string
}

func (q *Queries) SearchActiveUsers(ctx context.Context, arg SearchActiveUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, searchActiveUsers, arg.Limit, arg.Offset, arg.SearchTerm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Pfp,
			&i.Role,
			&i.EmailVerified,
			&i.Banned,
			&i.IsDeleted,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchBannedUsers = `-- name: SearchBannedUsers :many
SELECT
  u.user_id, u.username, u.email, u.password, u.pfp, u.role, u.email_verified, u.banned, u.is_deleted, u.created_at
FROM "user" u
WHERE u.banned = true
  AND (
    u.username ILIKE '%' || $3::text || '%'
    OR u.email ILIKE '%' || $3::text || '%'
  )
ORDER BY u.created_at DESC
LIMIT $1 OFFSET $2
`

type SearchBannedUsersParams struct {
	Limit      int32
	Offset     int32
	SearchTerm string
}

func (q *Queries) SearchBannedUsers(ctx context.Context, arg SearchBannedUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, searchBannedUsers, arg.Limit, arg.Offset, arg.SearchTerm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Pfp,
			&i.Role,
			&i.EmailVerified,
			&i.Banned,
			&i.IsDeleted,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchDeletedUsers = `-- name: SearchDeletedUsers :many
SELECT
  u.user_id, u.username, u.email, u.password, u.pfp, u.role, u.email_verified, u.banned, u.is_deleted, u.created_at
FROM "user" u
WHERE u.is_deleted = true
  AND (
    u.username ILIKE '%' || $3::text || '%'
    OR u.email ILIKE '%' || $3::text || '%'
  )
ORDER BY u.created_at DESC
LIMIT $1 OFFSET $2
`

type SearchDeletedUsersParams struct {
	Limit      int32
	Offset     int32
	SearchTerm string
}

func (q *Queries) SearchDeletedUsers(ctx context.Context, arg SearchDeletedUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, searchDeletedUsers, arg.Limit, arg.Offset, arg.SearchTerm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Pfp,
			&i.Role,
			&i.EmailVerified,
			&i.Banned,
			&i.IsDeleted,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setEmailVerified = `-- name: SetEmailVerified :exec
UPDATE "user" 
SET email_verified = true 
WHERE user_id = $1
`

func (q *Queries) SetEmailVerified(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, setEmailVerified, userID)
	return err
}

const unbanUser = `-- name: UnbanUser :exec
UPDATE "user" 
SET banned = false 
WHERE user_id = $1
`

func (q *Queries) UnbanUser(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, unbanUser, userID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user" 
SET username = COALESCE($2, username),
    pfp = COALESCE($3, pfp)
WHERE user_id = $1
`

type UpdateUserParams struct {
	UserID   pgtype.UUID
	Username string
	Pfp      string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.UserID, arg.Username, arg.Pfp)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE "user" 
SET password = $2 
WHERE user_id = $1
`

type UpdateUserPasswordParams struct {
	UserID   pgtype.UUID
	Password string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.UserID, arg.Password)
	return err
}
