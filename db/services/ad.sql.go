// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: ad.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAd = `-- name: CreateAd :one
INSERT INTO "ads" 
("title", "description", "image_url", "target_url", "placement", "status", "start_date", "end_date")
VALUES 
($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING "id"
`

type CreateAdParams struct {
	Title       pgtype.Text
	Description pgtype.Text
	ImageUrl    pgtype.Text
	TargetUrl   pgtype.Text
	Placement   pgtype.Text
	Status      pgtype.Text
	StartDate   pgtype.Timestamptz
	EndDate     pgtype.Timestamptz
}

func (q *Queries) CreateAd(ctx context.Context, arg CreateAdParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createAd,
		arg.Title,
		arg.Description,
		arg.ImageUrl,
		arg.TargetUrl,
		arg.Placement,
		arg.Status,
		arg.StartDate,
		arg.EndDate,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const deactivateAd = `-- name: DeactivateAd :one
UPDATE "ads"
SET 
  "status" = 'inactive', 
  "updated_at" = now()
WHERE "id" = $1
RETURNING "id"
`

func (q *Queries) DeactivateAd(ctx context.Context, id pgtype.UUID) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, deactivateAd, id)
	err := row.Scan(&id)
	return id, err
}

const deleteAd = `-- name: DeleteAd :one
DELETE FROM "ads"
WHERE "id" = $1
RETURNING "id"
`

func (q *Queries) DeleteAd(ctx context.Context, id pgtype.UUID) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, deleteAd, id)
	err := row.Scan(&id)
	return id, err
}

const incrementAdClicks = `-- name: IncrementAdClicks :one
UPDATE "ads"
SET 
  "clicks" = "clicks" + 1, 
  "updated_at" = now()
WHERE "id" = $1
RETURNING "clicks"
`

func (q *Queries) IncrementAdClicks(ctx context.Context, id pgtype.UUID) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, incrementAdClicks, id)
	var clicks pgtype.Int4
	err := row.Scan(&clicks)
	return clicks, err
}

const listActiveAds = `-- name: ListActiveAds :many
SELECT id, title, description, image_url, target_url, placement, status, clicks, start_date, end_date, created_at, updated_at 
FROM "ads"
WHERE "status" = 'active'
  AND "start_date" <= now() 
  AND "end_date" >= now()
`

func (q *Queries) ListActiveAds(ctx context.Context) ([]Ad, error) {
	rows, err := q.db.Query(ctx, listActiveAds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ad
	for rows.Next() {
		var i Ad
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ImageUrl,
			&i.TargetUrl,
			&i.Placement,
			&i.Status,
			&i.Clicks,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAdsByPlacement = `-- name: ListAdsByPlacement :many
SELECT id, title, description, image_url, target_url, placement, status, clicks, start_date, end_date, created_at, updated_at 
FROM "ads"
WHERE "placement" = $1
  AND "status" = 'active'
  AND "start_date" <= now() 
  AND "end_date" >= now()
`

func (q *Queries) ListAdsByPlacement(ctx context.Context, placement pgtype.Text) ([]Ad, error) {
	rows, err := q.db.Query(ctx, listAdsByPlacement, placement)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ad
	for rows.Next() {
		var i Ad
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ImageUrl,
			&i.TargetUrl,
			&i.Placement,
			&i.Status,
			&i.Clicks,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAd = `-- name: UpdateAd :one
UPDATE "ads"
SET 
  "title" = $1,
  "description" = $2,
  "image_url" = $3,
  "target_url" = $4,
  "placement" = $5,
  "status" = $6,
  "start_date" = $7,
  "end_date" = $8,
  "updated_at" = now()
WHERE "id" = $9
RETURNING "id"
`

type UpdateAdParams struct {
	Title       pgtype.Text
	Description pgtype.Text
	ImageUrl    pgtype.Text
	TargetUrl   pgtype.Text
	Placement   pgtype.Text
	Status      pgtype.Text
	StartDate   pgtype.Timestamptz
	EndDate     pgtype.Timestamptz
	ID          pgtype.UUID
}

func (q *Queries) UpdateAd(ctx context.Context, arg UpdateAdParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, updateAd,
		arg.Title,
		arg.Description,
		arg.ImageUrl,
		arg.TargetUrl,
		arg.Placement,
		arg.Status,
		arg.StartDate,
		arg.EndDate,
		arg.ID,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
