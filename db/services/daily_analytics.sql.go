// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: daily_analytics.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDailyAnalytics = `-- name: CreateDailyAnalytics :one
INSERT INTO analytics_daily (
  analytics_date, total_views, total_likes, total_dislikes, total_comments, total_ads_clicks
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING analytics_date, total_views, total_likes, total_dislikes, total_comments, total_ads_clicks, created_at, updated_at
`

type CreateDailyAnalyticsParams struct {
	AnalyticsDate  pgtype.Date
	TotalViews     int32
	TotalLikes     int32
	TotalDislikes  int32
	TotalComments  int32
	TotalAdsClicks int32
}

func (q *Queries) CreateDailyAnalytics(ctx context.Context, arg CreateDailyAnalyticsParams) (AnalyticsDaily, error) {
	row := q.db.QueryRow(ctx, createDailyAnalytics,
		arg.AnalyticsDate,
		arg.TotalViews,
		arg.TotalLikes,
		arg.TotalDislikes,
		arg.TotalComments,
		arg.TotalAdsClicks,
	)
	var i AnalyticsDaily
	err := row.Scan(
		&i.AnalyticsDate,
		&i.TotalViews,
		&i.TotalLikes,
		&i.TotalDislikes,
		&i.TotalComments,
		&i.TotalAdsClicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDailyAnalytics = `-- name: GetDailyAnalytics :many
SELECT analytics_date, total_views, total_likes, total_dislikes, total_comments, total_ads_clicks, created_at, updated_at
FROM analytics_daily
WHERE analytics_date BETWEEN $1 AND $2
ORDER BY analytics_date DESC
`

type GetDailyAnalyticsParams struct {
	AnalyticsDate   pgtype.Date
	AnalyticsDate_2 pgtype.Date
}

func (q *Queries) GetDailyAnalytics(ctx context.Context, arg GetDailyAnalyticsParams) ([]AnalyticsDaily, error) {
	rows, err := q.db.Query(ctx, getDailyAnalytics, arg.AnalyticsDate, arg.AnalyticsDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AnalyticsDaily
	for rows.Next() {
		var i AnalyticsDaily
		if err := rows.Scan(
			&i.AnalyticsDate,
			&i.TotalViews,
			&i.TotalLikes,
			&i.TotalDislikes,
			&i.TotalComments,
			&i.TotalAdsClicks,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDailyAnalytics = `-- name: UpdateDailyAnalytics :one
UPDATE analytics_daily
SET 
  total_views = $2,
  total_likes = $3,
  total_dislikes = $4,
  total_comments = $5,
  total_ads_clicks = $6,
  updated_at = now()
WHERE analytics_date = $1
RETURNING analytics_date, total_views, total_likes, total_dislikes, total_comments, total_ads_clicks, created_at, updated_at
`

type UpdateDailyAnalyticsParams struct {
	AnalyticsDate  pgtype.Date
	TotalViews     int32
	TotalLikes     int32
	TotalDislikes  int32
	TotalComments  int32
	TotalAdsClicks int32
}

func (q *Queries) UpdateDailyAnalytics(ctx context.Context, arg UpdateDailyAnalyticsParams) (AnalyticsDaily, error) {
	row := q.db.QueryRow(ctx, updateDailyAnalytics,
		arg.AnalyticsDate,
		arg.TotalViews,
		arg.TotalLikes,
		arg.TotalDislikes,
		arg.TotalComments,
		arg.TotalAdsClicks,
	)
	var i AnalyticsDaily
	err := row.Scan(
		&i.AnalyticsDate,
		&i.TotalViews,
		&i.TotalLikes,
		&i.TotalDislikes,
		&i.TotalComments,
		&i.TotalAdsClicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
