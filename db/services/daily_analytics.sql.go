// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: daily_analytics.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const aggregateAnalytics = `-- name: AggregateAnalytics :one
SELECT
    SUM("total_views") AS "total_views",
    SUM("total_likes") AS "total_likes",
    SUM("total_dislikes") AS "total_dislikes",
    SUM("total_comments") AS "total_comments",
    SUM("total_ads_clicks") AS "total_ads_clicks"
FROM "analytics_daily"
WHERE "analytics_date" BETWEEN $1 AND $2
`

type AggregateAnalyticsParams struct {
	AnalyticsDate   pgtype.Date
	AnalyticsDate_2 pgtype.Date
}

type AggregateAnalyticsRow struct {
	TotalViews     int64
	TotalLikes     int64
	TotalDislikes  int64
	TotalComments  int64
	TotalAdsClicks int64
}

func (q *Queries) AggregateAnalytics(ctx context.Context, arg AggregateAnalyticsParams) (AggregateAnalyticsRow, error) {
	row := q.db.QueryRow(ctx, aggregateAnalytics, arg.AnalyticsDate, arg.AnalyticsDate_2)
	var i AggregateAnalyticsRow
	err := row.Scan(
		&i.TotalViews,
		&i.TotalLikes,
		&i.TotalDislikes,
		&i.TotalComments,
		&i.TotalAdsClicks,
	)
	return i, err
}

const createDailyAnalytics = `-- name: CreateDailyAnalytics :one
INSERT INTO analytics_daily (
  analytics_date, total_views, total_likes, total_dislikes, total_comments, total_ads_clicks
)
VALUES ($1, 0, 0, 0, 0, 0)
RETURNING analytics_date, total_views, total_likes, total_dislikes, total_comments, total_ads_clicks, created_at, updated_at
`

func (q *Queries) CreateDailyAnalytics(ctx context.Context, analyticsDate pgtype.Date) (AnalyticsDaily, error) {
	row := q.db.QueryRow(ctx, createDailyAnalytics, analyticsDate)
	var i AnalyticsDaily
	err := row.Scan(
		&i.AnalyticsDate,
		&i.TotalViews,
		&i.TotalLikes,
		&i.TotalDislikes,
		&i.TotalComments,
		&i.TotalAdsClicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementDailyComments = `-- name: DecrementDailyComments :one
UPDATE analytics_daily
SET total_comments = total_comments - 1
WHERE analytics_date = $1
RETURNING analytics_date, total_views, total_likes, total_dislikes, total_comments, total_ads_clicks, created_at, updated_at
`

func (q *Queries) DecrementDailyComments(ctx context.Context, analyticsDate pgtype.Date) (AnalyticsDaily, error) {
	row := q.db.QueryRow(ctx, decrementDailyComments, analyticsDate)
	var i AnalyticsDaily
	err := row.Scan(
		&i.AnalyticsDate,
		&i.TotalViews,
		&i.TotalLikes,
		&i.TotalDislikes,
		&i.TotalComments,
		&i.TotalAdsClicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementDailyDislikes = `-- name: DecrementDailyDislikes :one
UPDATE analytics_daily
SET total_dislikes = total_dislikes - 1
WHERE analytics_date = $1
RETURNING analytics_date, total_views, total_likes, total_dislikes, total_comments, total_ads_clicks, created_at, updated_at
`

func (q *Queries) DecrementDailyDislikes(ctx context.Context, analyticsDate pgtype.Date) (AnalyticsDaily, error) {
	row := q.db.QueryRow(ctx, decrementDailyDislikes, analyticsDate)
	var i AnalyticsDaily
	err := row.Scan(
		&i.AnalyticsDate,
		&i.TotalViews,
		&i.TotalLikes,
		&i.TotalDislikes,
		&i.TotalComments,
		&i.TotalAdsClicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementDailyLikes = `-- name: DecrementDailyLikes :one
UPDATE analytics_daily
SET total_likes = total_likes - 1
WHERE analytics_date = $1
RETURNING analytics_date, total_views, total_likes, total_dislikes, total_comments, total_ads_clicks, created_at, updated_at
`

func (q *Queries) DecrementDailyLikes(ctx context.Context, analyticsDate pgtype.Date) (AnalyticsDaily, error) {
	row := q.db.QueryRow(ctx, decrementDailyLikes, analyticsDate)
	var i AnalyticsDaily
	err := row.Scan(
		&i.AnalyticsDate,
		&i.TotalViews,
		&i.TotalLikes,
		&i.TotalDislikes,
		&i.TotalComments,
		&i.TotalAdsClicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDailyAnalytics = `-- name: GetDailyAnalytics :many
SELECT analytics_date, total_views, total_likes, total_dislikes, total_comments, total_ads_clicks, created_at, updated_at
FROM analytics_daily
WHERE analytics_date BETWEEN $1 AND $2
ORDER BY analytics_date DESC
LIMIT $3
`

type GetDailyAnalyticsParams struct {
	AnalyticsDate   pgtype.Date
	AnalyticsDate_2 pgtype.Date
	Limit           int32
}

func (q *Queries) GetDailyAnalytics(ctx context.Context, arg GetDailyAnalyticsParams) ([]AnalyticsDaily, error) {
	rows, err := q.db.Query(ctx, getDailyAnalytics, arg.AnalyticsDate, arg.AnalyticsDate_2, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AnalyticsDaily
	for rows.Next() {
		var i AnalyticsDaily
		if err := rows.Scan(
			&i.AnalyticsDate,
			&i.TotalViews,
			&i.TotalLikes,
			&i.TotalDislikes,
			&i.TotalComments,
			&i.TotalAdsClicks,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementDailyAdsClicks = `-- name: IncrementDailyAdsClicks :one
UPDATE analytics_daily
SET total_ads_clicks = total_ads_clicks + 1
WHERE analytics_date = $1
RETURNING analytics_date, total_views, total_likes, total_dislikes, total_comments, total_ads_clicks, created_at, updated_at
`

func (q *Queries) IncrementDailyAdsClicks(ctx context.Context, analyticsDate pgtype.Date) (AnalyticsDaily, error) {
	row := q.db.QueryRow(ctx, incrementDailyAdsClicks, analyticsDate)
	var i AnalyticsDaily
	err := row.Scan(
		&i.AnalyticsDate,
		&i.TotalViews,
		&i.TotalLikes,
		&i.TotalDislikes,
		&i.TotalComments,
		&i.TotalAdsClicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementDailyComments = `-- name: IncrementDailyComments :one
UPDATE analytics_daily
SET total_comments = total_comments + 1
WHERE analytics_date = $1
RETURNING analytics_date, total_views, total_likes, total_dislikes, total_comments, total_ads_clicks, created_at, updated_at
`

func (q *Queries) IncrementDailyComments(ctx context.Context, analyticsDate pgtype.Date) (AnalyticsDaily, error) {
	row := q.db.QueryRow(ctx, incrementDailyComments, analyticsDate)
	var i AnalyticsDaily
	err := row.Scan(
		&i.AnalyticsDate,
		&i.TotalViews,
		&i.TotalLikes,
		&i.TotalDislikes,
		&i.TotalComments,
		&i.TotalAdsClicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementDailyDislikes = `-- name: IncrementDailyDislikes :one
UPDATE analytics_daily
SET total_dislikes = total_dislikes + 1
WHERE analytics_date = $1
RETURNING analytics_date, total_views, total_likes, total_dislikes, total_comments, total_ads_clicks, created_at, updated_at
`

func (q *Queries) IncrementDailyDislikes(ctx context.Context, analyticsDate pgtype.Date) (AnalyticsDaily, error) {
	row := q.db.QueryRow(ctx, incrementDailyDislikes, analyticsDate)
	var i AnalyticsDaily
	err := row.Scan(
		&i.AnalyticsDate,
		&i.TotalViews,
		&i.TotalLikes,
		&i.TotalDislikes,
		&i.TotalComments,
		&i.TotalAdsClicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementDailyLikes = `-- name: IncrementDailyLikes :one
UPDATE analytics_daily
SET total_likes = total_likes + 1
WHERE analytics_date = $1
RETURNING analytics_date, total_views, total_likes, total_dislikes, total_comments, total_ads_clicks, created_at, updated_at
`

func (q *Queries) IncrementDailyLikes(ctx context.Context, analyticsDate pgtype.Date) (AnalyticsDaily, error) {
	row := q.db.QueryRow(ctx, incrementDailyLikes, analyticsDate)
	var i AnalyticsDaily
	err := row.Scan(
		&i.AnalyticsDate,
		&i.TotalViews,
		&i.TotalLikes,
		&i.TotalDislikes,
		&i.TotalComments,
		&i.TotalAdsClicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementDailyViews = `-- name: IncrementDailyViews :one
UPDATE analytics_daily
SET total_views = total_views + 1
WHERE analytics_date = $1
RETURNING analytics_date, total_views, total_likes, total_dislikes, total_comments, total_ads_clicks, created_at, updated_at
`

func (q *Queries) IncrementDailyViews(ctx context.Context, analyticsDate pgtype.Date) (AnalyticsDaily, error) {
	row := q.db.QueryRow(ctx, incrementDailyViews, analyticsDate)
	var i AnalyticsDaily
	err := row.Scan(
		&i.AnalyticsDate,
		&i.TotalViews,
		&i.TotalLikes,
		&i.TotalDislikes,
		&i.TotalComments,
		&i.TotalAdsClicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDailyAnalytics = `-- name: UpdateDailyAnalytics :one
UPDATE analytics_daily
SET 
  total_views = $2,
  total_likes = $3,
  total_dislikes = $4,
  total_comments = $5,
  total_ads_clicks = $6,
  updated_at = now()
WHERE analytics_date = $1
RETURNING analytics_date, total_views, total_likes, total_dislikes, total_comments, total_ads_clicks, created_at, updated_at
`

type UpdateDailyAnalyticsParams struct {
	AnalyticsDate  pgtype.Date
	TotalViews     int32
	TotalLikes     int32
	TotalDislikes  int32
	TotalComments  int32
	TotalAdsClicks int32
}

func (q *Queries) UpdateDailyAnalytics(ctx context.Context, arg UpdateDailyAnalyticsParams) (AnalyticsDaily, error) {
	row := q.db.QueryRow(ctx, updateDailyAnalytics,
		arg.AnalyticsDate,
		arg.TotalViews,
		arg.TotalLikes,
		arg.TotalDislikes,
		arg.TotalComments,
		arg.TotalAdsClicks,
	)
	var i AnalyticsDaily
	err := row.Scan(
		&i.AnalyticsDate,
		&i.TotalViews,
		&i.TotalLikes,
		&i.TotalDislikes,
		&i.TotalComments,
		&i.TotalAdsClicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
