// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: category.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO category (category_name)
VALUES ($1)
RETURNING category_id, category_name
`

func (q *Queries) CreateCategory(ctx context.Context, categoryName string) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, categoryName)
	var i Category
	err := row.Scan(&i.CategoryID, &i.CategoryName)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :one
DELETE FROM category
WHERE category_id = $1
RETURNING category_id, category_name
`

func (q *Queries) DeleteCategory(ctx context.Context, categoryID pgtype.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, deleteCategory, categoryID)
	var i Category
	err := row.Scan(&i.CategoryID, &i.CategoryName)
	return i, err
}

const getCategory = `-- name: GetCategory :one
SELECT category_id, category_name
FROM category
WHERE category_id = $1
`

func (q *Queries) GetCategory(ctx context.Context, categoryID pgtype.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, categoryID)
	var i Category
	err := row.Scan(&i.CategoryID, &i.CategoryName)
	return i, err
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT category_id, category_name
FROM category
WHERE category_id = $1
`

func (q *Queries) GetCategoryByID(ctx context.Context, categoryID pgtype.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByID, categoryID)
	var i Category
	err := row.Scan(&i.CategoryID, &i.CategoryName)
	return i, err
}

const getCategoryByName = `-- name: GetCategoryByName :one
SELECT category_id, category_name
FROM category
WHERE category_name = $1
`

func (q *Queries) GetCategoryByName(ctx context.Context, categoryName string) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByName, categoryName)
	var i Category
	err := row.Scan(&i.CategoryID, &i.CategoryName)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT category_id, category_name
FROM category
ORDER BY category_name ASC
LIMIT $1
`

func (q *Queries) ListCategories(ctx context.Context, limit int32) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.CategoryID, &i.CategoryName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE category
SET category_name = $2
WHERE category_id = $1
RETURNING category_id, category_name
`

type UpdateCategoryParams struct {
	CategoryID   pgtype.UUID
	CategoryName string
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.CategoryID, arg.CategoryName)
	var i Category
	err := row.Scan(&i.CategoryID, &i.CategoryName)
	return i, err
}
